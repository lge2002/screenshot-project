# report/views.py

from django.shortcuts import render
import os
from django.conf import settings
from datetime import datetime
from weather.models import CloudAnalysis # Assuming you'll still want to display data later

def report_view(request):
    # Find the base directory where your images are stored (e.g., 'images' folder)
    image_base_dir = os.path.join(settings.BASE_DIR, 'images')
    latest_timestamp_folder = None

    # URLs for various image types
    cropped_tn_image_url = None
    masked_coimbatore_image_url = None # Specific masked district example
    aligned_overlay_tn_url = None # Placeholder for the full TN map with an overlay

    # --- Find the latest timestamped folder ---
    if os.path.exists(image_base_dir):
        all_timestamp_folders = sorted([d for d in os.listdir(image_base_dir) if os.path.isdir(os.path.join(image_base_dir, d))], reverse=True)
        if all_timestamp_folders:
            latest_timestamp_folder = all_timestamp_folders[0] # Get the most recent one

    # --- Construct Image URLs based on the latest run ---
    if latest_timestamp_folder:
        # 1. Cropped Tamil Nadu image
        cropped_tn_path_relative = os.path.join(latest_timestamp_folder, 'cropped', 'tamil_nadu_cropped.png')
        if os.path.exists(os.path.join(settings.MEDIA_ROOT, cropped_tn_path_relative)):
            cropped_tn_image_url = os.path.join(settings.MEDIA_URL, cropped_tn_path_relative).replace('\\', '/')

        # 2. Sample Shape-masked cropped image (e.g., Coimbatore)
        # Assuming you have a 'coimbatore' subfolder under 'masked_cropped'
        masked_coimbatore_path_relative = os.path.join(latest_timestamp_folder, 'masked_cropped', 'coimbatore', 'coimbatore_masked.png')
        if os.path.exists(os.path.join(settings.MEDIA_ROOT, masked_coimbatore_path_relative)):
            masked_coimbatore_image_url = os.path.join(settings.MEDIA_URL, masked_coimbatore_path_relative).replace('\\', '/')
        
        # 3. Shape-mask overlayed Tamil Nadu image (This file is NOT generated by your current automation)
        # You would need to modify your automation script to create this image (e.g.,
        # by drawing shapefile outlines on the full screenshot).
        # Assuming it would be saved in the 'full' folder for example, with a specific name.
        aligned_overlay_filename = 'tamil_nadu_overlay_highlighted.png' # <--- This filename is an ASSUMPTION
        aligned_overlay_path_relative = os.path.join(latest_timestamp_folder, 'full', aligned_overlay_filename)
        if os.path.exists(os.path.join(settings.MEDIA_ROOT, aligned_overlay_path_relative)):
            aligned_overlay_tn_url = os.path.join(settings.MEDIA_URL, aligned_overlay_path_relative).replace('\\', '/')


    # You may still want to pass cloud data if you need it in the report later
    # For now, keeping it simple as per your request to focus on images.
    # If you want cloud data, add:
    # cloud_data_list = []
    # for entry in CloudAnalysis.objects.order_by('city', '-timestamp'):
    #    if entry.city not in latest_cloud_data: latest_cloud_data[entry.city] = entry
    # cloud_data_list = sorted(latest_cloud_data.values(), key=lambda x: x.city)


    context = {
        'image_urls': { # Dictionary to hold all image URLs
            'cropped_tn': cropped_tn_image_url,
            'masked_coimbatore': masked_coimbatore_image_url,
            'aligned_overlay_tn': aligned_overlay_tn_url, # Will be None if file doesn't exist
        },
        # 'cloud_data_list': cloud_data_list, # Uncomment if you need this
    }
    return render(request, 'report/report.html', context)

